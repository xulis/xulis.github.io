<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>(b (s x g))</title>
    <link>/</link>
    <description>Recent content on (b (s x g))</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 19 Jul 2019 00:00:00 +0800</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>JavaScript用到的一些编程范式</title>
      <link>/blog/2019-07-19-js/</link>
      <pubDate>Fri, 19 Jul 2019 00:00:00 +0800</pubDate>
      
      <guid>/blog/2019-07-19-js/</guid>
      <description>&amp;ldquo;这是之前发在自己公众号的一篇文章， 直接搬过来&amp;rdquo;
  在运维世界里，有时候你可以做一些没有也可以， 但是有就更好的各种xx管理平台。最近， 我也想弄一个你们DevOps所说的“运维管理平台。 其实也没什么运不运维，本质上来说就是Web开发。
 所以， 我又一股脑地投向了前端娱乐圈。
 我不是一个实在的人，我每时每刻都在追求那些不切实际的东西，如若要搞前端，自然也不例外，当别人的眼神流露出对我还在玩上个月的框架的鄙视时， 我就恨不得从一开始就没有玩过前端。基于此，我大部分时间都在刷行业动态，GraphQL、LiveView、React牛逼还是Vue牛逼，Angular更新到什么版本了？TypeScript对比ELM有什么优势&amp;hellip;刷得精疲力尽之后，开始工作。
 经过两天这里看一下那里看一下，我学习了一些JavaScript的入门知识，写下此文以作记录，考虑到要除去中间开小差的时间，取名《JavaScript一日游》，主要记录JavaScript中的惯用编程范式。
 相对于别的编程语言来说，JavaScript简直就是嬉皮士，你想规规矩矩面向对象的时候它让你必须函数式一下，你想纯粹函数式的时候在某一时刻发现数据状态必须改一改，当然你很牛逼，这都不是事儿。然而由于NodeJS运行时是基于异步IO和事件循环模型， 你就死在了程序和事件一起写这件事上面。所以，用JavaScript来学习JavaScript的编程范式，并不是最好的方法，因为在学习之前，要踩过去的坑太多，所以接下来我用Racket来解释JavaScript编程范式，用最简单的方式来讲解(毕竟复杂的我也不会 -。- )。
0x00: 回调 (callback)  选择NodeJS就是选择异步编程，就如前文所说，在很多时候你是程序和事件(event)一起写，程序就一步一步跑，事件会被丢到事件循环列表(poll queue)中，程序安安稳稳跑完，事件就不断被遍历执行，因为其丢到了队列里，所以不会阻塞程序的执行，所以有时候你的程序看起来执行顺序有点迷，比如有两个函数AB，按顺序调用AB，执行时却发现B先执行，A跟在了B屁股后面，这种事情你别问为什么，一问就发生：
#lang racket (define 🐢 (displayln &amp;#34;🐢🐢🐢...&amp;#34;)) (define 🐇 (displayln &amp;#34;🐇🐇🐇...&amp;#34;)) 🐢 🐇  我们定义了乌龟和兔子两个函数，先调用乌龟函数，再调用兔子函数，正常来说我们会看到这样的输出：
🐢🐢🐢... 🐇🐇🐇...  但是在NodeJS里面，你很可能会看到这样的输出：
🐇🐇🐇... 🐢🐢🐢...  因为乌龟跑得慢，NodeJS是异步设计，有一些慢的执行(异步操作)就不等了，直接把它丢poll queue里，之后等待Event Loop轮到它的时候再执行，所以兔子就不等乌龟，自己先跑完了，乌龟在队列里排队。
 现在知道为什么NodeJS那么快了吧，在日常应用中，比如网路、IO这些比较慢的操作，NodeJS直接异步了丫的，让后面的程序先跑。不过快是快，就是程序行为有时候会很迷～
 那么有什么方法可以解决这种情况呢？毕竟有时候乌龟必须要在兔子前面，比如乌龟是兔子的女朋友，兔子跑赢乌龟就是找死，或者有一个操作强依赖前面那个异步的操作。
 这时候就用到回调了。
 回调呢，专业术语就是：回来之后再调用它丫的，呸呸呸，是“is any executable code that is passed as an argument to other code that is expected to call back (execute) the argument at a given time.</description>
    </item>
    
    <item>
      <title>线性递归、线性迭代和树形递归</title>
      <link>/blog/2016-07-14-golang-try/</link>
      <pubDate>Thu, 14 Jul 2016 00:00:00 +0800</pubDate>
      
      <guid>/blog/2016-07-14-golang-try/</guid>
      <description>刚刚看到线性递归、线性迭代和树形递归这几个概念，一时兴起，便模仿起来，也算是入门练手吧，恰巧最近在看Golang这门很简陋(哈哈~~)的语言。
//线性递归方法求阶乘  package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(factorial(6)) } func factorial(i int) (n int) { if i == 1 { return 1 } else { return i * factorial(i-1) } } //树形递归方法求某个斐波那契数  package main import &amp;#34;fmt&amp;#34; func main() { fmt.Println(fib(8)) } func fib(i int) int { switch i { case 0: return 0 case 1: return 1 default: return fib(i-1) + fib(i-2) } } //线性迭代方法求某个斐波那契数  package main import &amp;#34;fmt&amp;#34; func main() { fmt.</description>
    </item>
    
    <item>
      <title>2300年前的欧几里得算法</title>
      <link>/blog/2018-06-07-algorithms-gcd/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0800</pubDate>
      
      <guid>/blog/2018-06-07-algorithms-gcd/</guid>
      <description>2300年前的欧几里得算法，做的是这样一件事情：找出两个数的最大公约数。
自然语言描述： 计算两个非负整数p和q的最大公约数：若q是0，则最大公约数为p。否则，将p除以q得到余数r,p和q的最大公约数即为q和r的最大公约数。 PS: 欧几里得大概是很无聊的，那么奇怪的规律也能找到。
实现:
defmodule Alt do def gcd(p, 0), do: p def gcd(p, q), do: gcd(q, rem(p, q)) end IO.puts Alt.gcd(10,4) #-&amp;gt; 2  IO.puts Alt.gcd(10,0) #-&amp;gt; 10 </description>
    </item>
    
    <item>
      <title>正则序和应用序</title>
      <link>/blog/2016-02-01-ao-and-no/</link>
      <pubDate>Mon, 01 Feb 2016 00:00:00 +0800</pubDate>
      
      <guid>/blog/2016-02-01-ao-and-no/</guid>
      <description>要点: 正则序：先展开过程，再求值。 应用序：先求值，再代入过程。
对于以下代码:
(define (p) (p)) (define (test x y) (if (= x 0) 0 y)) (test 0 (p)) 如果解释器采用的是应用序，则程序会不断地执行，因为需要求值p函数，然而p函数返回自己，因此进入死循环。
(test 0 (p)) (test 0 (p)) (test 0 (p)) ...  而对于采用正则序的解释器，程序则能成功输出0，因为，解释器先展开过程，再求值(如果表达式有用到，而这里因为x=0，并没有用到p函数)，过程是这样的:
(test 0 (p)) (if (= 0 0) 0 (p)) (if #t 0 (p)) 0 </description>
    </item>
    
    <item>
      <title>2021.05.19</title>
      <link>/daily/2021-05-19-day1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/daily/2021-05-19-day1/</guid>
      <description>要说今天发生的最大的事情，当然是新垣结衣结婚了！尽管互联网上哀嚎遍野，但大家都知道其中大部分是瞎起哄、开玩笑的。之所以说是“大部分”，是因为我相信还是会有小部分像我这样真正地悲伤的。
 如果单论长相，其实好看的明星多了去了。但是真正想让人发自内心喜欢，单靠脸庞是不够的，那必须是要有一个完美的形象加持的。而这形象的加持，靠的是高质量的作品，就如Gakki依托《恋空》、《李狗嗨》和她的其他作品一样。
 那些年看了很多日剧。荧幕上熟悉的面孔，阿部宽、堺雅人、Gakki等等历历在目。事实上，在国产剧质量普遍偏低的大背景下，控制自己的信息输入是非常重要的，因为这些文化潜移默化地构筑起了你的内心世界，我非常庆幸在我的成长过程中通过豆瓣、IMDB、知乎的渠道了解到了那些更加优秀的文化。
 然而Gakki结婚让我意识到了一个事情——它们都在离我们而去。就好比某个明星退隐，某个演员去世一样，那些陪伴我们长大的流行音乐，电影电视剧，都慢慢开始封存于历史当中。有一天我看《大明王朝》时想到，现在的年轻人还会看这些电视剧吗？你会看到很多流量明星耍耍嘴皮子几千万，至少在文化这一点，我觉得世界是趋于粗鄙化的，它不一定是越来越好的！
 想到这里，就有点悲伤，与此同时，我也迫不及待地想去搜刮那些“旧”的影视作品。</description>
    </item>
    
    <item>
      <title>2021.05.20</title>
      <link>/daily/2021-05-20-day2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/daily/2021-05-20-day2/</guid>
      <description>今天是520。从深圳回到广州，可以明显地感觉到深圳这个城市对于这种节日要更隆重一些，大概是因为这个城市有更多的年轻人。
 我不喜欢把日子特殊化。就连生日我也不喜欢特殊对待，从悲观的角度想，我觉得这种日子没什么特别的，或者说，不会有特别的日子会在固定的时间里出现，从乐观的角度想，我觉得每一天都是独一无二的，每一个日期，在日历中都只有一次，因此每一天都应该认真对待。
 尽管如此，我也会受外界影响。
 要说今天最能触动我的，大概是《情书》在今天重映了。这让我想起了年轻(现在29了😞)的时候，虽然身上没有幸运地发生爱情，但却一直有一份对纯爱的向往。
 如今，我的心也像 J·K罗琳笔下的男巫的毛心脏那般， 慢慢长毛了，能够救它的人，在哪呢？</description>
    </item>
    
    <item>
      <title>2021.05.21</title>
      <link>/daily/2021-05-21-day3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/daily/2021-05-21-day3/</guid>
      <description>今天得知一个消息，因为公司的组织架构调整，有些一起玩得还不错的同事也许以后会很少见面了，这让我着实伤感。
 我想起了贾樟柯的《山河故人》，电影的海报上直白地写着「每个人只能陪你走一段路」。人的一生，总是意外地与人相遇，再然后与他们别离。有时候别离并不那么容易察觉，等你回过神来，只得后悔那些一起仰望天空的日子里，笑得太少。</description>
    </item>
    
    <item>
      <title>2021.05.24</title>
      <link>/daily/2021-05-24-day4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/daily/2021-05-24-day4/</guid>
      <description>今天想到一个事情，有点懊恼。
 就是想起有一次去欢聚时代面试，我撒了个「半谎」。那什么是「半谎」呢？事情是这样的，面试官问我有没有遇到过Prometheus挂掉(内存泄漏)的情况，我当时有点激动，因为就在面试前几天同事才跟我聊到说他遇到Prometheus会OOM，而且是DB超过100G的时候会出现。于是我就说我遇到过，Prometheus磁盘使用超过100G的时候会OOM，具体原因不知道是什么，我还慌称升级到26版本可以解决这个问题，因为同事有提到github issue说那是一个Bug，而我用的最新版本并没遇到这样的问题。
 所以这就是我所谓的「半谎」。它包含一部分事实，但并不是全部都是事实，都是我从同事那里听来的，但其实我自己并没有遇到过Prometheus OOM的情况，我在线上系统上百台服务器， 在三台16C32G的服务器上放日志系统和监控系统也稳得一逼。
 尽管只是「半慌」，我还是有些后悔自己说出这样的话。那个面试不通过很可能也是因为面试官觉得我在这一点上忽悠了他们。事实上我也不觉得磁盘达到100G会导致Prometheus OOM (逗谁呢)，只是当时鬼迷心窍，想着附和面试官的故障场景。
 一份工作的时长通常是三年不等，但是人的品质会伴随一生。为了短期利益违背真我，其实是下策，我愿以此为戒，在今后的日子里要更加正直坦荡 ，知之为知之，不知为不知，是知也！
 不过话说回来，我一直觉得面试不仅是能力考核，它还是一种技术交流的方式，我通常会非常珍惜。但是我面过两次欢聚时代，他们的面试给我的感觉就纯粹是能力考核了，而且面试官有点高斗，果然修身这件事上，是不分面试官和求职者的。</description>
    </item>
    
    <item>
      <title>2021.05.25</title>
      <link>/daily/2021-05-25-day5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/daily/2021-05-25-day5/</guid>
      <description>当事人现在非常感慨：做废物真是太难受了！
 今天面试遇到一个比较懂技术的面试官，问的好些问题我都回答不上来，实在尴尬。虽然我对面试通常是持积极心态，很多时候是抱着学习的心态参加面试的，但这一次，还是受到了些打击——因为意识到自己实在太废啦 😞
 期间我还闹了些笑话，出洋相了。面试官问我 HTTP2 和 HTTP1.1 有什么区别的，我说「HTTP2可以多个客户端共用链接，比如一个局域网里面有一千台电脑，它们到服务端只需要一个链接」面试官直接听懵了，我能够理解他的匪夷所思，甚至隔着电话都能感受到他那尴尬而不失礼貌的微笑，对方直呼「好吧好吧&amp;hellip;.」。
 我也知道这答案太劲爆了！那么我为什么会说出这个答案呢？刚才我洗澡的时候想起来了，在很久很久以前，HTTP2刚推出的时候，我有了解一下，其中 HTTP2有一个特性叫 多路复用（multiplexing），这个功能可以使得客户端在同一个连接中连续发送多个请求，然后当时就想到一个场景，假设一个局域网有一千台电脑(或者更多)，那只需要在出口的地方和服务器端建立一个连接，那岂不是这个局域网所有的请求到服务端都能共享一个链接！妙哉！哈哈～时间久了，脑子里的这个场景就变成了面试中那个回答。
 总的来说，这个面试还是蛮有意义，让我意识到我的知识其实还是蛮薄弱的，在接下来的一段时间里，学习一下《图解TCP/IP》和《图解HTTP》吧。没文化真是容易闹笑话，做废物真是太难受了。✊</description>
    </item>
    
    <item>
      <title>2021.05.26</title>
      <link>/daily/2021-05-26-day6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/daily/2021-05-26-day6/</guid>
      <description>今天要表达的想法如图：
 自五月开始，就不间断受到各方面的打击。工作、生活和学习上的全方位打击。
 因为这些打击，内心开始变得烦躁，进而又做出了一些不经三思的决策(梭哈)，而这些决策又更进一步地导致生活的不顺，如此这般恶性循环。
 心理学家把应对挫折、接受失败、从困境中解脱的能力称之为逆商。现在的我迫切需要这样一种能力，不过这种技能一时半会也没有办法获得，我只得上知乎搜刮一波，收获了一些鸡汤，也有一些思维方法，在此记录一个其中觉得还行的：
 建立心理基调：首先在心理上接受事情原本就是困难的(客观事实)，就好比如炒股，不要一开始就想着暴富，而应该知道赚钱的只是少数人。想进一个好的公司，做一份好的工作等等，首先默认它是困难的并接受它，建立好心理基调。这样有助于避免自己遇到挫折时会认为自己能力不行，运气不好。 迎难而上： 解决困难是促进进步的机会，就跟游戏打怪一样的，会掉血才能升级。 解决苦难的思路：大事着眼，小处着手。以小积大。   Up + 999</description>
    </item>
    
    <item>
      <title>2021.05.27</title>
      <link>/daily/2021-05-27-day7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/daily/2021-05-27-day7/</guid>
      <description>萧瑟秋风今又是，换了人间。——《浪淘沙·北戴河》
 xxx xxx  今天和一个刚认识不久的人在天台聊天，其间一会我看着夜空许久，突然想起小时候在家乡看的夜空。印象里那时候的夜空群星闪耀，月光皎洁，照得群山通明。现在别说小时候那种心境，就是这漫天星星好像也是很久没有见过了。也不知是因为宇宙膨胀，星星们离我们而去，还是因为我太久没静下心来看过夜空了，或许都有吧。
  你不要用战术上的勤奋掩盖战略上的懒惰 —— 雷军
 只要努力，你有能力，不管你什么学历都能找到好工作 只要你足够优秀，她肯定会喜欢你的。 只要你努力工作，足够勤奋，就会得到领导的赏识。 只要你努力工作，足够勤奋，就会得到领导的赏识。 只要你努力工作，足够勤奋，就会得到领导的赏识。 只要你努力工作，足够勤奋，就会得到领导的赏识。  xxxx xxxx       诸如以上一些思维，伴随了我很长一段时间。所以到头来我只是努力，然后感动自己而已。无外乎一些人说所谓的成长就是认知的升级，我的认知等级还是太低了。</description>
    </item>
    
    <item>
      <title>2021.05.28</title>
      <link>/daily/2021-05-28-day8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/daily/2021-05-28-day8/</guid>
      <description> 远离聊天工具，你的时间将成倍增长。 远离凡尔赛（&amp;amp; 阿兰德波顿所说的“那些势利鬼”）。 做有意义的事情。 果然真正的友谊实在难得啊。  </description>
    </item>
    
    <item>
      <title>2021.05.31</title>
      <link>/daily/2021-05-31-day9/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/daily/2021-05-31-day9/</guid>
      <description>尽管每天都感觉很忙，但回头一想，却觉得啥也没干，每天就在这样的焦虑中度过。
 为了解决这个问题，我决定学着做一下时间管理，就像我们工作那样，给自己写OKR、分Sprint、设置番茄钟。今天是第一天开始执行，为了响应这样的决定我还做了一些仪式感——在聊天群里设置自己的昵称为「升级中&amp;hellip;」，暗示自己在新的六月要摆脱五月的颓势，重新起步。
 然而万事开头难，中间难，最后更难。眼看着一个个番茄钟过去，我却不知道干什么，看看IM信息，协助一下同事工作，做一些根本进不了记忆的琐事，这一天就那么到头了！
 我意识到时间管理之后，我还欠缺目标管理。说到底如果我没找到该做的事情的话，不打游戏挤出来的时间也会变成聊天看剧。所以接下来，必须得把该做的事情排一排才行。
PS: 这说好要早睡的又不知不觉变成了12:38！！！</description>
    </item>
    
    <item>
      <title>2021.06.01</title>
      <link>/daily/2021-06-01-day10/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/daily/2021-06-01-day10/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2021.06.02</title>
      <link>/daily/2021-06-02-day11/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/daily/2021-06-02-day11/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2021.06.03</title>
      <link>/daily/2021-06-03-day12/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/daily/2021-06-03-day12/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2021.06.04</title>
      <link>/daily/2021-06-04-day13/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/daily/2021-06-04-day13/</guid>
      <description>今天意识到一个很严重的问题，这个问题在我身上持续了很长一段时间，也可能会持续存在很长时间！
 这个问题就是我在工作中好像很久没有进入过 “心流” ref状态了。
 我目前所供职的公司采用远程办公的形式，远程办公最明显的问题是员工的沟通问题，我们平时使用公司自己的一个IM类型产品进行工作交流，看起来没什么问题，就好像大家上班也会用企业微信、钉钉之类的。
但是，如果是在远程办公的场景下，内部IM的消息是非常频繁的，这大量的消息里，大部分是跟自己无关的，你会忍不住一直处在 “waiting” 状态，因为你担心错过自己的消息而没来得及回复同事。
 这种状态真是太糟糕了，我怎么一直都没有发现呢?</description>
    </item>
    
  </channel>
</rss>
